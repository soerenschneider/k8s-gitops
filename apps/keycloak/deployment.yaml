---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "keycloak"
  labels:
    app.kubernetes.io/name: "keycloak"
    app.kubernetes.io/instance: "keycloak-prod"
    app.kubernetes.io/component: "server"
  annotations:
    reloader.stakater.com/auto: "true"
    ignore-check.kube-linter.io/no-read-only-root-fs: "TODO: Fix keycloak to allow readonly root fs"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "keycloak"
  template:
    metadata:
      labels:
        app: "keycloak"
        app.kubernetes.io/name: "keycloak"
        app.kubernetes.io/instance: "keycloak-prod"
        app.kubernetes.io/component: "server"
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: "RuntimeDefault"
      containers:
        - name: "keycloak"
          image: "quay.io/keycloak/keycloak:26.3.1"
          args: ["start"]
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
            seccompProfile:
              type: "RuntimeDefault"
            capabilities:
              drop:
                - "ALL"
          envFrom:
            - configMapRef:
                name: "keycloak"
            - secretRef:
                name: "keycloak"
          ports:
            - name: "keycloak"
              containerPort: 8080
            - name: "management"
              containerPort: 9000
          resources:
            requests:
              memory: "512Mi"
              cpu: "50m"
            limits:
              memory: "768Mi"
          startupProbe:
            httpGet:
              path: "/health"
              port: "management"
            failureThreshold: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: "/health"
              port: "management"
            initialDelaySeconds: 5
          livenessProbe:
            httpGet:
              path: "/health"
              port: "management"
