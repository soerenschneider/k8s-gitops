    worker_processes 1;
    events {
      worker_connections 1024;
    }

    http {
      server {
        listen 8080;
        absolute_redirect off;
        port_in_redirect off;

        # security settings
        server_tokens off;
        client_body_buffer_size 1M;
        client_header_buffer_size 1M;
        client_max_body_size 1M;
        large_client_header_buffers 2 1M;

        resolver kube-dns.kube-system.svc.cluster.local;

        location /alertmanager {
            rewrite ^(/alertmanager)$ $1/ permanent;
        }

        location /alertmanager/ {
            set $upstream_alertmanager http://alertmanager.monitoring.svc.cluster.local;
            proxy_pass $upstream_alertmanager;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 1s;
            proxy_read_timeout 3s;
            rewrite ^/alertmanager/(.*)$ /$1 break;
        }

        location /blackbox-exporter {
            rewrite ^(/blackbox-exporter)$ $1/ permanent;
        }

        location /blackbox-exporter/ {
            set $upstream_blackbox_exporter http://blackbox-exporter.monitoring.svc.cluster.local;
            proxy_pass $upstream_blackbox_exporter;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 1s;
            proxy_read_timeout 3s;
            rewrite ^/blackbox-exporter/(.*)$ /$1 break;
        }

        location /prometheus {
            rewrite ^(/prometheus)$ $1/ permanent;
        }

        location /prometheus/ {
            set $upstream_prometheus http://prometheus.monitoring.svc.cluster.local;
            proxy_pass $upstream_prometheus;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 1s;
            proxy_read_timeout 3s;
            rewrite ^/prometheus/(.*)$ /$1 break;
        }

        location /karma {
            set $upstream_karma http://karma.monitoring.svc.cluster.local;
            proxy_pass $upstream_karma;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 1s;
            proxy_read_timeout 3s;
            proxy_redirect off;
        }

        location /pushgateway {
            rewrite ^(/pushgateway)$ $1/ permanent;
        }

        location /pushgateway/ {
            set $upstream_pushgateway http://pushgateway.monitoring.svc.cluster.local;
            proxy_pass $upstream_pushgateway;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 1s;
            proxy_read_timeout 3s;
            rewrite ^/pushgateway/(.*)$ /$1 break;
        }

        location /vmalert {
            rewrite ^(/vmalert)$ $1/ permanent;
        }

        location /vmalert/ {
            set $upstream_vmalert http://vmalert.monitoring.svc.cluster.local;
            proxy_pass $upstream_vmalert;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 1s;
            proxy_read_timeout 3s;
            rewrite ^/vmalert/(.*)$ /$1 break;
        }

        location = /health {
          access_log off;
          add_header 'Content-Type' 'application/json';
          return 200 '{"status":"UP"}';
        }

        location / {
          return 404;
        }
      }
    }
